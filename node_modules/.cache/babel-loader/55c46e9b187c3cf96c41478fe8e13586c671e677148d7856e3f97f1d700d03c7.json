{"ast":null,"code":"var _jsxFileName = \"/Users/adityagaba/Downloads/iNoteBook-main/src/context/notes/NoteState.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport NoteContext from './NoteContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = 'http://localhost:4000';\n  const notesData = [];\n  const [notes, setNotes] = useState(notesData);\n  //Get all Notes\n  const getNotes = async () => {\n    //Backend Update\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n  };\n  //Add a Note\n  const addNote = async (title, description, tag) => {\n    //Backend Update\n    await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n\n    //Frontend Update\n    getNotes();\n  };\n  //Delete a Note\n  const deleteNote = async id => {\n    //Backend Update\n    await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    //Frontend Update\n    let newnote = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newnote);\n  };\n  //Edit a Note\n  const editNote = async (id, title, description, tag) => {\n    //Backend Update\n    await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      }) // body data type must match \"Content-Type\" header\n    });\n    //Frontend Update\n    getNotes();\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"LA051RcOuNhCpfhxeePHYibH+4Q=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesData","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","deleteNote","id","newnote","filter","note","_id","editNote","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adityagaba/Downloads/iNoteBook-main/src/context/notes/NoteState.js"],"sourcesContent":["import { useState } from 'react'\nimport NoteContext from './NoteContext'\n\nconst  NoteState=(props)=>{\n  const host='http://localhost:4000'\nconst notesData= []\n      const [notes,setNotes]=useState(notesData)\n      //Get all Notes\n      const getNotes=async()=>{\n        //Backend Update\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n          method: \"GET\", \n          headers: {\n            \"Content-Type\": \"application/json\",\n           \"auth-token\":localStorage.getItem('token')\n          },\n        });\n        const json=await response.json(); \n        setNotes(json);\n      }\n      //Add a Note\n      const addNote=async(title,description,tag)=>{\n        //Backend Update\n     await fetch(`${host}/api/notes/addnote`, {\n          method: \"POST\", \n          headers: {\n            \"Content-Type\": \"application/json\",\n           \"auth-token\":localStorage.getItem('token')\n          },\n          body: JSON.stringify({title,description,tag}), // body data type must match \"Content-Type\" header\n        });\n        \n        //Frontend Update\n       getNotes()\n      }\n      //Delete a Note\n      const deleteNote=async(id)=>{\n          //Backend Update\n        await fetch(`${host}/api/notes/deletenote/${id}`, {\n            method: \"DELETE\", \n            headers: {\n              \"Content-Type\": \"application/json\",\n             \"auth-token\":localStorage.getItem('token')\n            },\n          });\n          //Frontend Update\n          let newnote=notes.filter((note)=>{return note._id!==id })\n          setNotes(newnote)\n      }\n      //Edit a Note\n      const editNote=async(id,title,description,tag)=>{\n        //Backend Update\n       await fetch(`${host}/api/notes/updatenote/${id}`, {\n          method: \"PUT\", \n          headers: {\n            \"Content-Type\": \"application/json\",\n           \"auth-token\":localStorage.getItem('token')\n          },\n          body: JSON.stringify({title,description,tag}), // body data type must match \"Content-Type\" header\n        });\n        //Frontend Update\n        getNotes()\n      }\n\n return(\n    <NoteContext.Provider value={{notes,addNote,deleteNote,editNote,getNotes}}>\n        {props.children}\n    </NoteContext.Provider>\n )\n}\n\nexport default NoteState\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}